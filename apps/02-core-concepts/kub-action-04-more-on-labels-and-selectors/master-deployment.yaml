---
apiVersion: v1
kind: Service
metadata:
  name: backend
  # Agregamos labels al Service
  labels:
    app: second-app
spec:
  selector:
    app: second-app
  ports:
    - protocol: 'TCP'
      port: 80
      targetPort: 8080
  type: LoadBalancer
---  
apiVersion: apps/v1
kind: Deployment
metadata:
  name: second-app-deployment
  # Agregamos labels al Deployment
  labels:
    app: second-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: second-app
      tier: backend
    # Seleccionamos los Pods con una expresi贸n
    # matchExpressions:
      # Indicamos que queremos que este Deployment contorle todos los Pods que esten (In) con el valor second-app o first-app
      # In = dentro de valores
      # NotIn = Diferente de valores
      # - { key: app, operator: In, values: [second-app, first-app]}
  template: 
    metadata:
      labels: 
        # Uno de los labels concuerda con los definidos en el Deployment
        app: second-app
        tier: backend
    spec:
      containers: 
        - name: second-node
          image: toledo1082/kub-action-01-starting-setup:3
          # Sin importar si cambia el tag, siempre force el pull de la imagen.
          imagePullPolicy: Always
          # Configuraci贸n de salud del contenedor
          livenessProbe: 
            # Configuramos petici贸n HTTP
            httpGet: 
              path: / # Path que consulta K8s para validar que el contenedor esta ok
              port: 8080 # Puerto que expone el contenedor
            periodSeconds: 10 # Intervalo de segundos para verificar la salud del contenedor
            initialDelaySeconds: 5 # Delay inicial de la verificaci贸n de salud
